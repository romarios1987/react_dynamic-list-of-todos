{"version":3,"sources":["components/Todo.tsx","components/TodoList.tsx","components/todos-service.ts","App.tsx","index.tsx"],"names":["Todo","todo","user","title","completed","name","className","TodoList","todosList","map","key","id","API_URL","getData","url","a","fetch","response","json","getPreparedTodos","todos","users","preparedTodos","find","person","userId","App","useState","setTodos","isLoading","setIsLoading","isLoaded","setLoaded","selectedSort","setSelectedSort","showAllTodos","todosFromApi","sortedTodos","useMemo","sort","aTodo","bTodo","localeCompare","Number","value","onChange","event","typeOfSort","target","disabled","scope","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"0RAOaA,EAAwB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC9BC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAErB,OACE,4BACGF,GAAS,4BAAKA,EAAKG,MACpB,wBAAIC,UAAU,aAAaH,GAC1BC,EACG,wBAAIE,UAAU,cAAd,QACA,wBAAIA,UAAU,aAAd,mBCRGC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACvC,oCACGA,EAAUC,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAAMS,IAAKT,EAAKU,GAAIV,KAAMA,S,OCR/CW,EAAU,wCAEHC,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDAcPC,EAAgB,uCAAG,gCAAAJ,EAAA,sEAPvBF,EAAO,UAAYD,EAAZ,UAOgB,cACxBQ,EADwB,gBAHvBP,EAAO,UAAYD,EAAZ,UAGgB,cAExBS,EAFwB,OAGxBC,EAAgCF,EAAMX,KAAI,SAAAR,GAAI,kCAC/CA,GAD+C,IAElDC,KAAMmB,EAAME,MAAK,SAAAC,GAAM,OAAIA,EAAOb,KAAOV,EAAKwB,eALlB,kBAQvBH,GARuB,2CAAH,qDCZhBI,G,MAAgB,WAAO,IAAD,EACPC,mBAAyB,IADlB,mBAC1BP,EAD0B,KACnBQ,EADmB,OAECD,oBAAS,GAFV,mBAE1BE,EAF0B,KAEfC,EAFe,OAGHH,oBAAS,GAHN,mBAG1BI,EAH0B,KAGhBC,EAHgB,OAIOL,mBAAS,UAJhB,mBAI1BM,EAJ0B,KAIZC,EAJY,KAM3BC,EAAY,uCAAG,4BAAApB,EAAA,6DACnBe,GAAa,GADM,SAGQX,IAHR,OAGbiB,EAHa,OAKnBR,EAASQ,GACTN,GAAa,GACbE,GAAU,GAPS,2CAAH,qDAgBZK,EAAcC,mBAAQ,WAC1B,MAAwB,YAAjBL,EAAA,YACCb,GACJ,YAAIA,GAAOmB,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,IAAK,QACH,OAAOO,EAAMrC,MAAMuC,cAAcD,EAAMtC,OACzC,IAAK,OACH,OAAOqC,EAAMtC,MAAQuC,EAAMvC,KAAOsC,EAAMtC,KAAKG,KAAKqC,cAAcD,EAAMvC,KAAKG,MAAQ,EACrF,IAAK,YACH,OAAOsC,OAAOH,EAAMpC,WAAauC,OAAOF,EAAMrC,WAChD,QACE,OAAO,QAGd,CAACgB,EAAOa,IAGX,OAAIJ,EAEA,uBAAGvB,UAAU,WAAb,cAOF,yBAAKA,UAAU,aACb,wBAAIA,UAAU,0BAAd,yBAEGyB,EAaG,oCACE,4BACEa,MAAOX,EACPY,SApDC,SAACC,GAAiD,IAChDC,EAAeD,EAAME,OAA5BJ,MAERV,EAAgBa,IAkDJzC,UAAU,sBAEV,4BAAQ2C,UAAQ,EAACL,MAAM,UAAvB,eACA,4BAAQA,MAAM,WAAd,gBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,aAAd,cAEF,2BAAOtC,UAAU,wBACf,2BAAOA,UAAU,cACf,4BACE,wBAAI4C,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGJ,+BACE,kBAAC,EAAD,CAAU1C,UAAW6B,OAhC3B,oCACE,4BACEc,KAAK,SACL7C,UAAU,kBACV8C,QAASjB,GAHX,kBCzDdkB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8ad8f3df.chunk.js","sourcesContent":["import React from 'react';\nimport { PreparedTodo } from '../interfaces';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const Todo: React.FC<Props> = ({ todo }) => {\n  const { user, title, completed } = todo;\n\n  return (\n    <tr>\n      {user && (<td>{user.name}</td>)}\n      <td className=\"text-left\">{title}</td>\n      {completed\n        ? <td className=\"bg-success\">Done</td>\n        : <td className=\"bg-danger\">Don&rsquo;t do</td>}\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PreparedTodo } from '../interfaces';\nimport { Todo } from './Todo';\n\ninterface Props {\n  todosList: PreparedTodo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todosList }) => (\n  <>\n    {todosList.map(todo => <Todo key={todo.id} todo={todo} />)}\n  </>\n);\n","import { User, Todo, PreparedTodo } from '../interfaces';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodo[]> => {\n  const todos: Todo[] = await getTodos();\n  const users: User[] = await getUsers();\n  const preparedTodos: PreparedTodo[] = todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }));\n\n  return preparedTodos;\n};\n","import React, { useState, useMemo } from 'react';\nimport { PreparedTodo } from './interfaces';\nimport { TodoList } from './components/TodoList';\nimport { getPreparedTodos } from './components/todos-service';\nimport './App.css';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<PreparedTodo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [selectedSort, setSelectedSort] = useState('choose');\n\n  const showAllTodos = async () => {\n    setIsLoading(true);\n\n    const todosFromApi = await getPreparedTodos();\n\n    setTodos(todosFromApi);\n    setIsLoading(false);\n    setLoaded(true);\n  };\n\n  const sorted = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value: typeOfSort } = event.target;\n\n    setSelectedSort(typeOfSort);\n  };\n\n  const sortedTodos = useMemo(() => {\n    return selectedSort === 'initual'\n      ? [...todos]\n      : [...todos].sort((aTodo, bTodo) => {\n        switch (selectedSort) {\n          case 'title':\n            return aTodo.title.localeCompare(bTodo.title);\n          case 'name':\n            return aTodo.user && bTodo.user ? aTodo.user.name.localeCompare(bTodo.user.name) : 0;\n          case 'completed':\n            return Number(aTodo.completed) - Number(bTodo.completed);\n          default:\n            return 0;\n        }\n      });\n  }, [todos, selectedSort]);\n\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n        Loading...\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title text-center mt-5\">Dynamic list of TODOs</h1>\n      {(\n        !isLoaded\n          ? (\n            <>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={showAllTodos}\n              >\n                Load Todos\n              </button>\n            </>\n          )\n          : (\n            <>\n              <select\n                value={selectedSort}\n                onChange={sorted}\n                className=\"custom-select my-3\"\n              >\n                <option disabled value=\"choose\">Choose sort</option>\n                <option value=\"initual\">Initual view</option>\n                <option value=\"title\">Title</option>\n                <option value=\"name\">Name</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n              <table className=\"table table-bordered\">\n                <thead className=\"thead-dark\">\n                  <tr>\n                    <th scope=\"col\">User</th>\n                    <th scope=\"col\">Todo</th>\n                    <th scope=\"col\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <TodoList todosList={sortedTodos} />\n                </tbody>\n              </table>\n            </>\n          )\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}